// This file is generated by Firebase Genkit.
// prettier-ignore
/**
 * @fileOverview A hairstyle suggestion AI agent.
 *
 * - suggestHairstyleFlow - A flow that handles the hairstyle suggestion process.
 * - SuggestHairstyleInput - The input type for the suggestHairstyle function.
 * - SuggestHairstyleOutput - The return type for the suggestHairstyle function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestHairstyleInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a face, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  gender: z.enum(['male', 'female']).describe('The gender of the user.'),
});
export type SuggestHairstyleInput = z.infer<typeof SuggestHairstyleInputSchema>;

const SuggestHairstyleOutputSchema = z.object({
  faceShape: z.string().describe('The shape of the face detected in the photo.'),
  suggestedHairstyles: z
    .array(z.string())
    .describe('A list of suggested hairstyles based on the face shape and gender.'),
  referencePhotos: z
    .array(z.string())
    .describe('A list of data URIs of reference photos for the suggested hairstyles.'),
});
export type SuggestHairstyleOutput = z.infer<typeof SuggestHairstyleOutputSchema>;

const prompt = ai.definePrompt({
  name: 'suggestHairstylePrompt',
  input: {schema: SuggestHairstyleInputSchema},
  output: {schema: SuggestHairstyleOutputSchema},
  prompt: `You are a professional hairstylist. Based on the user's face shape and gender, you will suggest a list of hairstyles that would suit them.

Analyze the provided photo to determine the face shape, and then suggest hairstyles accordingly. Include reference photo data URIs for each suggested hairstyle if possible.

Photo: {{media url=photoDataUri}}
Gender: {{gender}}

Ensure that the suggested hairstyles are appropriate for the identified face shape and gender.`,
});

export const suggestHairstyleFlow = ai.defineFlow(
  {
    name: 'suggestHairstyleFlow',
    inputSchema: SuggestHairstyleInputSchema,
    outputSchema: SuggestHairstyleOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
